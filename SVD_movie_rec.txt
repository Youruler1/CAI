# -*- coding: utf-8 -*-
"""SVD_Movie_Recommendation (1) (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aQV1-nLvcCV8nu0FFK6uMo_Aj-PuTVzb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

features = ['user_id', 'movie_id', 'rating', 'timestamp']
df = pd.read_csv('http://files.grouplens.org/datasets/movielens/ml-100k/u.data', sep='\t', names=features)
df

df

Matrix_R = df.pivot_table(index=['user_id'], columns=['movie_id'], values='rating')

print(Matrix_R)



Matrix_R.loc[1,100]

df.shape

avg_rating_each_movie = Matrix_R.mean(axis=0)
Matrix_R = Matrix_R.replace(np.nan, avg_rating_each_movie)
each_user_avg_rating = Matrix_R.mean(axis=1)
Matrix_R_norm = Matrix_R.sub(each_user_avg_rating, axis=0)

Matrix_R_norm

U, S, VT = np.linalg.svd(Matrix_R_norm)
k = 100
low_rank_approx_U = U[:, :k]
low_rank_approx_S = np.diag(S[:k])
low_rank_approx_VT = VT[:k, :]
Matrix_R_norm_reconstruction = np.dot(low_rank_approx_U, np.dot(low_rank_approx_S, low_rank_approx_VT))



sqrt_S = np.sqrt(low_rank_approx_S)
low_rank_approx_U_dot_sqrt_S = np.dot(low_rank_approx_U, sqrt_S)
sqrt_S_dot_low_rank_approx_VT = np.dot(sqrt_S, low_rank_approx_VT)

def rating_prediction(i, j, user_mean):
    predicted_rating = user_mean + np.dot(low_rank_approx_U_dot_sqrt_S[i, :], sqrt_S_dot_low_rank_approx_VT[:, j])
    return predicted_rating

i, j = 1, 2  # Example user and movie
predicted_rating = rating_prediction(i, j, each_user_avg_rating[i])
print(f'Predicted rating for user {i} and movie {j}: {predicted_rating}')

user_mean = each_user_avg_rating.iloc[0]

predicted_rating = user_mean + np.dot(low_rank_approx_U_dot_sqrt_S[1, :], sqrt_S_dot_low_rank_approx_VT[:, 2])

random_users_list = np.random.choice(Matrix_R.index, size=100, replace=False)
random_movies_list = np.random.choice(Matrix_R.columns, size=100, replace=False)
comparisons = []

for user in random_users_list:
    for movie in random_movies_list:
        predicted_rating = rating_prediction(user, movie, each_user_avg_rating[user])
        actual_rating = Matrix_R.loc[user, movie]
        comparisons.append((user, movie, actual_rating, predicted_rating))

df_comparisons = pd.DataFrame(comparisons, columns=['User_id', 'Movie_id', 'Actual_Rating', 'Predicted_Rating'])
print(df_comparisons.head())

# Plot for one user
plot_df = df_comparisons[df_comparisons['User_id'] == df_comparisons['User_id'][3]]
user_id_for_graph = df_comparisons['User_id'][3]
plt.scatter(plot_df['Movie_id'], plot_df['Predicted_Rating'], label='Predicted Values')
plt.scatter(plot_df['Movie_id'], plot_df['Actual_Rating'], label='Actual Values')
plt.legend()
plt.title(f'Actual VS Predicted Rating for user {user_id_for_graph}')
plt.show()

from sklearn.metrics import r2_score
from math import sqrt
r2=r2_score(df_comparisons['Actual_Rating'],df_comparisons['Predicted_Rating'])
print(r2)

